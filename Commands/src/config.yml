# markdown代码生成
m:
  # 加粗
  b: tools.markdown.MarkdownTools.bold
  # 超链接
  l: tools.markdown.MarkdownTools.hyperLinks
  # 无序列表
  u: tools.markdown.MarkdownTools.unorderList
  # 取消无序列表
  nu: tools.markdown.MarkdownTools.cancelUnorderedList
  # 有序列表
  o: tools.markdown.MarkdownTools.orderedList
  # 引用
  q: tools.markdown.MarkdownTools.quote
  # 一级标题
  h1: tools.markdown.MarkdownTools.header1
  # 二级标题
  h2: tools.markdown.MarkdownTools.header2
  # 三级标题
  h3: tools.markdown.MarkdownTools.header3
  # 四级标题
  h4: tools.markdown.MarkdownTools.header4
  # 五级标题
  h5: tools.markdown.MarkdownTools.header5
  # 六级标题
  h6: tools.markdown.MarkdownTools.header6
  # 标题降级
  h+: tools.markdown.MarkdownTools.headerAdd
  # 标题升级
  h-: tools.markdown.MarkdownTools.headerMinus
  # 行内代码
  k: tools.markdown.MarkdownTools.inlineCode
  # 多个行内代码
  ks: tools.markdown.MarkdownTools.inlineCodeAuto
  # 移除行内代码
  nks: tools.markdown.MarkdownTools.inlineCodeUndo
  # 无序列表转表格
  u2t: tools.markdown.MardownConverter.unorderList2Table
  # 有序列表转无序列表
  o2u: tools.markdown.MardownConverter.orderList2UnorderList
  # 无序列表转有序列表
  u2o: tools.markdown.MardownConverter.unorderList2OrderList
  # 行内代码转加粗
  k2b: tools.markdown.MardownConverter.inlineCodeToBold
  # 高亮，对应<mark></mark>标签
  mark: tools.markdown.MarkdownTools.mark
  # markdown代码转成html
  2html: tools.markdown.MarkdownTools.toHtml
  # 图片
  img:
    # markdown图片
    default: tools.markdown.MarkdownTools.img
    # ![xxx](https://g.gravizo.com/svg?<dot代码>)
    dotsvg: tools.markdown.MarkdownTools.imgGravizoSvg
  # 朗读标签
  read: tools.sst.xunfei.XunFeiSstFlag.addSSTFlag
  duyin: tools.sst.xunfei.XunFeiSstFlag.duyin
  # 牛客网行内代码选择题
  nike:
    # 行内代码选择题。
    choice: tools.markdown.MardownConverter.nikeInlineCodeChoice
  # 代码块
  cb:
    # java代码块
    j:
      # 生成默认代码块
      default: tools.markdown.MarkdownTools.codeBlockJava
      # 生成没有getter和setter方法的java代码块
      ngs: tools.markdown.MdJavaCodeBlock.removeGetterSetterDefaultStyle
    # JavaScript代码块
    js: tools.markdown.MarkdownTools.codeBlockJavaScript
    # sql代码块
    sql: tools.markdown.MarkdownTools.codeBlockSql
    # PlantUML代码块
    plantuml:
      # 生成dot语法的PlantUML代码块。
      default: tools.markdown.MarkdownTools.codeBlockPlantUmlDot
    # default: tools.markdown.MarkdownTools.codeBlockDefault
    default: tools.markdown.MarkdownTools.codeBlock_UseLastArg
  # 删除块中的一些代码
  dcb:
    gsvc: tools.markdown.MdJavaCodeBlock.romoveGetterSetterLikeVC
    gs: tools.markdown.MdJavaCodeBlock.removeGetterSetterDefaultStyle
  # 表格
  table:
    # 将空格分隔的表格格式化为表格
    cp: tools.markdown.JavaDoc2Markdown.mdTableCopy
    # 将空格分隔的表格格式化为表格,并标出代码
    cphl: tools.markdown.JavaDoc2Markdown.mdTableCopyHighlight
    # 将多行分隔的无序列表转成表格
    u: tools.markdown.JavaDoc2Markdown.multiLine2Table
  # 从java API中复制表格转markdown表格
  api:
    # 生成表格
    table:
      # 默认表格
      default: tools.markdown.JavaDoc2Markdown.docMethodTable2MdTable
      # 生成方法表格
      m:
        default: tools.markdown.JavaDoc2Markdown.docMethodTable2MdTable
        nd: tools.markdown.JavaDoc2Markdown.docMethodTable2MdTableNoDescription
      # 只生成表格身体
      b:
        default: tools.markdown.JavaDoc2Markdown.docTable2MdTableBody
        nd: tools.markdown.JavaDoc2Markdown.generateTableBodyNoDescription
      # 属性表格
      f: tools.markdown.JavaDoc2Markdown.docFieldTable2MdTable
    # API中的属性列表
    p2u: tools.markdown.JavaDoc2Markdown.parametersList
# 字符串处理
s:
  # 删除空行
  dbl: tools.string.StringDeleter.deleteBlankLine
  # 删除多余空白符
  dsbc: tools.string.StringDeleter.deleteSpaces
  # 删除markdown代码块
  dcb: tools.string.StringDeleter.deleteMdCodeBlock
  # 删除空格
  rmsp: tools.string.StringDeleter.removeSpaces
  # 压缩成一行
  2ol: tools.string.StringDeleter.deleteCRLF
  # 翻译为URL
  tlurl: tools.string.StringConverter.translateToURL
  # 大写
  uc: tools.string.StringConverter.toUpperCase
  # 小写
  lc: tools.string.StringConverter.toLowerCase
  # 首字母小写
  lcf: tools.string.StringConverter.toLowerCaseFirst
  # 首字母大写
  ucf: tools.string.StringConverter.toUpperCaseFirst
  # Linux地址和windows地址相互转换
  cvpath: tools.string.StringConverter.convertFilePath
  # 格式化从微信公众号复制来的代码
  weixincode: tools.string.StringDeleter.weixinCode
  # 修复kindle乱码
  cpkd: tools.string.StringDeleter.cpkd
  # 先修复kindle乱码,然后标出代码。
  cpkdc: tools.string.StringDeleter.cpkdCode
  # 中文标点转英文标点
  cy2ey: tools.string.StringReplace.chineseSymbol2EnglishSymbol
  # 书签
  f:
    # x.x.x   类型的书签
    shuqian111: tools.string.PdfBookmarkOcrStrCorrector.correctBookmark111
    # x.xx    类型的书签
    shuqian12: tools.string.PdfBookmarkOcrStrCorrector.correctBookmark12
    # xx.x    类型的书签
    shuqian21: tools.string.PdfBookmarkOcrStrCorrector.correctBookmark21
    # xx.x.x  类型的书签
    shuqian211: tools.string.PdfBookmarkOcrStrCorrector.correctBookmark211
    # xx.xx   类型的书签
    shuqian22: tools.string.PdfBookmarkOcrStrCorrector.correctBookmark22
    # xx.xx.x 类型的书签
    shuqian221: tools.string.PdfBookmarkOcrStrCorrector.correctBookmark221
  # 驼峰命名法
  cc:
    # java包名称
    pn: tools.string.StringConverter.toCameCasePackgeName
    # java类名
    cn: tools.string.StringConverter.toCamelCaseClassName
    # java方法名,属性名
    mn: tools.string.StringConverter.toCameCaseMethodName
    # 取消驼峰命名法
    c: tools.string.StringConverter.cancelCameCase
  # 从文件的绝对路径中 获取文件名
  filename: tools.string.StringDeleter.getFileName
  # 全限定类名
  fqcn: tools.string.StringConverter.fullyQualifiedClassName
  # 全限定xml文件名
  fqxn: tools.string.StringConverter.fullyQualifiedXmlName
  # 格式化微博内容
  fmwb: tools.string.StringConverter.formatWeibo
  # 生成日期字符串：yyyy年MM月dd日
  date: tools.string.StringConverter.dateStr_Parameterless
  # 生成连接手机的adb命令
  adb: tools.string.StringConverter.adb
# 快捷git命令:当在其他电脑上可能会用到.
g:
  s: git status
  a: git add .
  b: git branch
  ba: git branch -a
  bd: git branch -d
  cm: git commit -m '
  cma: git commit --amend
  d: git diff
  f: git fetch
  fomt: git fetch origin master:tmp
  lpo: git log -10 --pretty=oneline
  lgo: git log --graph --oneline
  m: git merge
  pom: git push origin master
  pos: git push origin src
  pfom: git push -f origin master
  pfos: git push -f origin src
  plom: git pull origin master
  plos: git pull origin src
  r: git restore
  ra: git restore .
  rs: git restore --staged
  rb: git rebase
  rbi: git rebase -i
# html命令
html:
  # 其他命令
  default: tools.html.HtmlTools.htmlDefault_UseLastArg
  # html5模板
  t: templace/html/Html5Template.html
  # html超链接
  a: tools.html.HtmlTools.a
  # 锚点
  ac: tools.html.HtmlTools.anchor
  # html注释
  cm: tools.html.HtmlTools.addComment
  # 讲html注释替换成JSP注释
  2jspcm: tools.html.HtmlTools.htmlComment2JspComment
  # 导入.css的link标签
  linkcss: tools.html.HtmlTools.linkCss
  # 导入.js的标签
  js: tools.html.HtmlTools.importJS
  # 展开/折叠块
  fold: tools.html.HtmlTools.flod
  # 展开/折叠块 折叠内容我<pre>...</pre>
  dp: tools.html.HtmlTools.detailsPre
  # 多行字符串转成html无序列表
  ul: tools.html.HtmlTools.unorderedList
  # 生成<pre></pre>代码块
  pre: tools.html.HtmlTools.pre
  # 替换成转义字符
  es: tools.html.HtmlTools.escape
  # 撤销html转义
  unes: tools.html.HtmlTools.undoEscape
  # 格式化html代码:每个标签占一行
  fl: tools.html.HtmlTools.formatToLine
  # 清理HTML文档中没有必要的属性
  clean: tools.html.HtmlTools.clean
  # HTML代码转Markdown
  2md:
    # HTML文本转换为Markdown文本
    default: tools.html.Html2MarkDown.toMd
    # HTML table单行代码 转markdown table
    table: tools.html.Html2MarkDown.htmlOneLineTable2MdTable
  # 移除html标签，转成纯文本
  2txt: tools.html.HtmlTools.toTxt
# java代码模板
j:
  # 生成for语句
  for:
    # 遍历字符串的for语句
    str: tools.java.JavaTools.forString
    # 遍历数组的for语句
    arr: tools.java.JavaTools.forArray
  # 生成switch语句
  switch:
    # 生成默认的switch语句
    default: tools.java.JavaTools.switchCaseDefault
    # 生成条件为String的Switch语句
    str: tools.java.JavaTools.switchCaseString
  # 生成System.out.println();
  sout:
    # System.out.println();语句转换成sb.append()语句
    ap: tools.java.JavaTools.sout2Append
  # 格式化代码
  f:
    # 格式化单行注释,把放在末尾的单行注释移动到代码行的上方
    c: tools.java.JavaTools.formatSingleLineComments
    # 格式化mybatis注解的@Results标签
    myrs: tools.java.JavaTools.mybatisResultsFormat
  # 交换参数的顺序(Exchange parameter order)，例如:`int a,int b`交换后变成`int b,int a`
  ecpo: tools.java.JavaTools.exchangeParameterOrder
  # 获取jar包的名称和版本，artifactId version
  jarName: tools.java.JavaTools.jarArtifactIdAndVersion
  # 隐藏方法实现，（Hidden method implementation） `public synchronized boolean contains(Object value) {...}`
  hmi: tools.java.JavaTools.hiddenMethodImplementation
# 算法
suanfa:
  # 冒泡排序
  maopao:
    js: templace/algorithm/sort/js/BubbleSort.js
    default: templace/algorithm/sort/java/BubbleSort.java
  # 鸡尾酒排序
  jiweijiu: templace/algorithm/sort/java/CockTailSort.java
  # 选择排序
  xuanzhe: templace/algorithm/sort/java/SelectionSort.java
  # 插入排序
  charu: templace/algorithm/sort/java/InsertSort.java
  # 希尔排序
  xier: templace/algorithm/sort/java/ShellSort.java
  # 转换成QQ输入法的多行个性短语
  2qq:
    # 转换成QQ输入法的多行个性短语
    default: tools.string.StringReplace.qqShuRuFa
    # 转换成QQ输入法的注释
    c: tools.string.StringReplace.qqShuRuFaZhuShi
